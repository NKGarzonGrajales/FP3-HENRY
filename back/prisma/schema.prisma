generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
  id            Int             @id @default(autoincrement())
  name          String
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  donations     Donations[]
=======
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())  
  posts       Post[]
  donations   Donations[]
>>>>>>> 1c03a9d18216e947d63ae9eceaafce28459ae1b8
  notifications Notifications[]
  posts         Post[]
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  petType     String
  contactInfo String
  dateLost    DateTime
  location    String
  photoUrl    String
<<<<<<< HEAD
  user        User     @relation(fields: [userId], references: [id])
}

model Donations {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Notifications {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  isRead    Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
=======
  userId      String    @db.Uuid
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())  
  updatedAt   DateTime   @updatedAt
}

model Donations {
  id          String        @id @default(uuid()) @db.Uuid
  amount      Float
  userId      String         @db.Uuid
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
}

model Notifications {
  id          String         @id @default(uuid()) @db.Uuid
  content     String
  type        String
  isRead      Boolean      @default(false)
  userId      String       @db.Uuid  
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
>>>>>>> 1c03a9d18216e947d63ae9eceaafce28459ae1b8
}
